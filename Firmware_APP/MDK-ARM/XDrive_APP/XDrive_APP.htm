<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\XDrive_APP\XDrive_APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\XDrive_APP\XDrive_APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Sep 19 18:53:56 2023
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
REINui_Desktop_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">ADC_DMAConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[3a]">ADC_DMAError</a> from stm32f1xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[39]">ADC_DMAHalfConvCplt</a> from stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from loop_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from loop_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from loop_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4d]">REINui_Calibration_drawing_function</a> from xdrive_ui.o(i.REINui_Calibration_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[49]">REINui_ControlDCE_drawing_function</a> from xdrive_ui.o(i.REINui_ControlDCE_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[4a]">REINui_ControlPID_drawing_function</a> from xdrive_ui.o(i.REINui_ControlPID_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[48]">REINui_Current_drawing_function</a> from xdrive_ui.o(i.REINui_Current_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[43]">REINui_Desktop_drawing_function</a> from xdrive_ui.o(i.REINui_Desktop_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[42]">REINui_Directory_drawing_function</a> from xdrive_ui.o(i.REINui_Directory_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[45]">REINui_Encoder_drawing_function</a> from xdrive_ui.o(i.REINui_Encoder_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[4e]">REINui_Information_drawing_function</a> from xdrive_ui.o(i.REINui_Information_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[46]">REINui_Location_drawing_function</a> from xdrive_ui.o(i.REINui_Location_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[44]">REINui_Power_drawing_function</a> from xdrive_ui.o(i.REINui_Power_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[4b]">REINui_SignalCount_drawing_function</a> from xdrive_ui.o(i.REINui_SignalCount_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[4c]">REINui_SignalPWM_drawing_function</a> from xdrive_ui.o(i.REINui_SignalPWM_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[47]">REINui_Speed_drawing_function</a> from xdrive_ui.o(i.REINui_Speed_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[41]">REINui_Switches_drawing_function</a> from xdrive_ui.o(i.REINui_Switches_drawing_function) referenced from xdrive_ui.o(i.XDrive_REINui_Init)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from loop_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from loop_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3b]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[3e]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[3e]">UART_DMAError</a> from stm32f1xx_hal_uart.o(i.UART_DMAError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[3c]">UART_DMAReceiveCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[3d]">UART_DMARxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[3f]">UART_DMATransmitCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[40]">UART_DMATxHalfCplt</a> from stm32f1xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from loop_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[4f]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[51]">xdUartRxIsr</a> from xdcom.o(i.xdUartRxIsr) referenced from loop.o(i.loop)
 <LI><a href="#[50]">xdUartTxIsr</a> from xdcom.o(i.xdUartTxIsr) referenced from loop.o(i.loop)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[17a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[17f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[180]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[181]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Mixed_TxTrigger
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[133]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Widget_Init
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Capture_Goal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Capture_Goal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_TIM_Callback
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Set_DownAcc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Capture_Goal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_TIM_Callback
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Set_DownAcc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Capture_Goal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Capture_Goal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_TIM_Callback
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Capture_Goal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Capture_Goal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_TIM_Callback
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[187]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[5a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[61]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[5c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[188]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[189]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[38]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[3a]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[39]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[70]"></a>ADC_Enable</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Button_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, button.o(i.Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Button_Init &rArr; REIN_GPIO_Button_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_Button_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[131]"></a>Button_Inquice_State</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, button.o(i.Button_Inquice_State))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Speed_drawing_function
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalPWM_drawing_function
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalCount_drawing_function
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Power_drawing_function
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Location_drawing_function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Information_drawing_function
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Encoder_drawing_function
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_drawing_function
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Desktop_drawing_function
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Current_drawing_function
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlPID_drawing_function
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlDCE_drawing_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Calibration_drawing_function
</UL>

<P><STRONG><a name="[74]"></a>Button_Read_Level</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, button.o(i.Button_Read_Level))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Scan_ms
</UL>

<P><STRONG><a name="[73]"></a>Button_Scan_ms</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, button.o(i.Button_Scan_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Button_Scan_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Read_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Callback_ms
</UL>

<P><STRONG><a name="[75]"></a>Calibration_Data_Check</STRONG> (Thumb, 326 bytes, Stack size 28 bytes, encode_cali.o(i.Calibration_Data_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Calibration_Data_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleSub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleRem
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
</UL>

<P><STRONG><a name="[171]"></a>Calibration_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, encode_cali.o(i.Calibration_Init))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[79]"></a>Calibration_Interrupt_Callback</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, encode_cali.o(i.Calibration_Interrupt_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Calibration_Interrupt_Callback &rArr; CycleDataAverage
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetDivideElec
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleDataAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7c]"></a>Calibration_Loop_Callback</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, encode_cali.o(i.Calibration_Loop_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Calibration_Loop_Callback &rArr; Stockpile_Flash_Data_Empty &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Capture_Goal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetSleep
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleSub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CycleRem
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Data_Check
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Write_Data16
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_End
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Empty
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Begin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[83]"></a>Control_Cur_To_Electric</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, motor_control.o(i.Control_Cur_To_Electric))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Control_Cur_To_Electric &rArr; REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[84]"></a>Control_DCE_Init</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, motor_control.o(i.Control_DCE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Control_DCE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_SetKV
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_SetKP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_SetKI
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_SetKD
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[88]"></a>Control_DCE_SetKD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_DCE_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_Init
</UL>

<P><STRONG><a name="[86]"></a>Control_DCE_SetKI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_DCE_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_Init
</UL>

<P><STRONG><a name="[85]"></a>Control_DCE_SetKP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_DCE_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_Init
</UL>

<P><STRONG><a name="[87]"></a>Control_DCE_SetKV</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_DCE_SetKV))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_Init
</UL>

<P><STRONG><a name="[89]"></a>Control_DCE_To_Electric</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, motor_control.o(i.Control_DCE_To_Electric))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Control_DCE_To_Electric &rArr; REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[8a]"></a>Control_PID_Init</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, motor_control.o(i.Control_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Control_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_SetKP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_SetKI
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_SetKD
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[8d]"></a>Control_PID_SetKD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_Init
</UL>

<P><STRONG><a name="[8c]"></a>Control_PID_SetKI</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_Init
</UL>

<P><STRONG><a name="[8b]"></a>Control_PID_SetKP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor_control.o(i.Control_PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_Init
</UL>

<P><STRONG><a name="[8e]"></a>Control_PID_To_Electric</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, motor_control.o(i.Control_PID_To_Electric))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Control_PID_To_Electric &rArr; REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[11a]"></a>CurrentControl_VREF_12Bit_MixOut</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hw_elec.o(i.CurrentControl_VREF_12Bit_MixOut))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetSleep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetDivideElec
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetBrake
</UL>

<P><STRONG><a name="[fa]"></a>Current_Tracker_Capture_Goal</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, current_tracker.o(i.Current_Tracker_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Current_Tracker_Capture_Goal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[8f]"></a>Current_Tracker_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, current_tracker.o(i.Current_Tracker_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Current_Tracker_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_Set_UpRate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_Set_DownRate
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[f6]"></a>Current_Tracker_NewTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, current_tracker.o(i.Current_Tracker_NewTask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[91]"></a>Current_Tracker_Set_DownRate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, current_tracker.o(i.Current_Tracker_Set_DownRate))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_Init
</UL>

<P><STRONG><a name="[90]"></a>Current_Tracker_Set_UpRate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, current_tracker.o(i.Current_Tracker_Set_UpRate))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_Init
</UL>

<P><STRONG><a name="[76]"></a>CycleAverage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, encode_cali.o(i.CycleAverage))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Data_Check
</UL>

<P><STRONG><a name="[7b]"></a>CycleDataAverage</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, encode_cali.o(i.CycleDataAverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CycleDataAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Interrupt_Callback
</UL>

<P><STRONG><a name="[78]"></a>CycleRem</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, encode_cali.o(i.CycleRem))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Data_Check
</UL>

<P><STRONG><a name="[77]"></a>CycleSub</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encode_cali.o(i.CycleSub))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Data_Check
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, loop_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, loop_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loop_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Dir_Res
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_OLED_SPI_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_MT6816_SPI_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mixed_Begin
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[94]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Empty
</UL>

<P><STRONG><a name="[12f]"></a>GRAM_Clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssd1306.o(i.GRAM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GRAM_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Speed_drawing_function
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalPWM_drawing_function
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalCount_drawing_function
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Power_drawing_function
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Location_drawing_function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Information_drawing_function
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Encoder_drawing_function
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_drawing_function
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Desktop_drawing_function
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Current_drawing_function
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlPID_drawing_function
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlDCE_drawing_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Calibration_drawing_function
</UL>

<P><STRONG><a name="[96]"></a>GRAM_DrawLine</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, ssd1306.o(i.GRAM_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GRAM_DrawLine &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalPWM_drawing_function
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_drawing_function
</UL>

<P><STRONG><a name="[97]"></a>GRAM_DrawPoint</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ssd1306.o(i.GRAM_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GRAM_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowPicture
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowChar
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_DrawLine
</UL>

<P><STRONG><a name="[98]"></a>GRAM_ShowChar</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, ssd1306.o(i.GRAM_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
</UL>

<P><STRONG><a name="[99]"></a>GRAM_ShowNum_LI_Max11</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, ssd1306.o(i.GRAM_ShowNum_LI_Max11))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Speed_drawing_function
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalPWM_drawing_function
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalCount_drawing_function
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Power_drawing_function
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Location_drawing_function
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Encoder_drawing_function
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Desktop_drawing_function
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Current_drawing_function
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlPID_drawing_function
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlDCE_drawing_function
</UL>

<P><STRONG><a name="[9c]"></a>GRAM_ShowPicture</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, ssd1306.o(i.GRAM_ShowPicture))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GRAM_ShowPicture &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalCount_drawing_function
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_drawing_function
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Desktop_drawing_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Calibration_drawing_function
</UL>

<P><STRONG><a name="[9b]"></a>GRAM_ShowString</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, ssd1306.o(i.GRAM_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Speed_drawing_function
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalPWM_drawing_function
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalCount_drawing_function
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Power_drawing_function
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Location_drawing_function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Information_drawing_function
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Encoder_drawing_function
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_drawing_function
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Desktop_drawing_function
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Current_drawing_function
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlPID_drawing_function
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlDCE_drawing_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Calibration_drawing_function
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
</UL>

<P><STRONG><a name="[9d]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f1xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
</UL>

<P><STRONG><a name="[10b]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[6f]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[6e]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[9f]"></a>HAL_ADC_Init</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Init &rArr; ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>

<P><STRONG><a name="[d6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
</UL>

<P><STRONG><a name="[92]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_DMA_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f1xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Empty
</UL>

<P><STRONG><a name="[153]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_End
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Empty
</UL>

<P><STRONG><a name="[a8]"></a>HAL_FLASH_Program</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Write_Data16
</UL>

<P><STRONG><a name="[152]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Empty
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stockpile_Flash_Data_Begin
</UL>

<P><STRONG><a name="[114]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 198 bytes, Stack size 28 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_DeInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_PWM_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_COUNT_DeInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_GPIO_Init</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_OLED_SPI_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_MT6816_SPI_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_PWM_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_COUNT_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_OLED_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_Modbus_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_MT6816_SPI_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_HwElec_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_Button_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
</UL>

<P><STRONG><a name="[172]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[6c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[156]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_COUNT_DeInit
</UL>

<P><STRONG><a name="[10d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_COUNT_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_DMA_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopIT_Priority_Overlay
</UL>

<P><STRONG><a name="[ab]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[b2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[160]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b6]"></a>HAL_SPI_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_OLED_SPI_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_MT6816_SPI_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Write_Data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Write_Comm
</UL>

<P><STRONG><a name="[ba]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINE_MT6816_SPI_Get_AngleData
</UL>

<P><STRONG><a name="[ae]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopIT_SysTick_20KHz
</UL>

<P><STRONG><a name="[122]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_DeInit
</UL>

<P><STRONG><a name="[128]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_DeInit
</UL>

<P><STRONG><a name="[be]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_IC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Stop_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_DeInit
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_TIM_Callback
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_SlaveConfigSynchro &rArr; TIM_SlaveTimer_SetConfig &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_UART_AbortReceive</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_AbortReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_AbortReceive &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Mixed_TxTrigger
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[d7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[d3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Config
</UL>

<P><STRONG><a name="[db]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mixed_Begin
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[de]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart_mixed.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek_UART_Mixed
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[e1]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Mixed_TxTrigger
</UL>

<P><STRONG><a name="[d9]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_mixed.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Dir_Control
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Seek_UART_Mixed
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[15d]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>Location_Interp_Capture_Goal</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, location_interp.o(i.Location_Interp_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Location_Interp_Capture_Goal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[103]"></a>Location_Interp_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, location_interp.o(i.Location_Interp_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[f7]"></a>Location_Interp_NewTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, location_interp.o(i.Location_Interp_NewTask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[e3]"></a>Location_Tracker_Capture_Goal</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, location_tracker.o(i.Location_Tracker_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Location_Tracker_Capture_Goal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[e6]"></a>Location_Tracker_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, location_tracker.o(i.Location_Tracker_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Location_Tracker_Init &rArr; Location_Tracker_Set_DownAcc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Set_UpAcc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Set_MaxSpeed
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Set_DownAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[f4]"></a>Location_Tracker_NewTask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, location_tracker.o(i.Location_Tracker_NewTask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[e9]"></a>Location_Tracker_Set_DownAcc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, location_tracker.o(i.Location_Tracker_Set_DownAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Location_Tracker_Set_DownAcc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Init
</UL>

<P><STRONG><a name="[e7]"></a>Location_Tracker_Set_MaxSpeed</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, location_tracker.o(i.Location_Tracker_Set_MaxSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Init
</UL>

<P><STRONG><a name="[e8]"></a>Location_Tracker_Set_UpAcc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, location_tracker.o(i.Location_Tracker_Set_UpAcc))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Init
</UL>

<P><STRONG><a name="[ea]"></a>LoopIT_Priority_Overlay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loop_it.o(i.LoopIT_Priority_Overlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoopIT_Priority_Overlay &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[eb]"></a>LoopIT_SysTick_20KHz</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loop_it.o(i.LoopIT_SysTick_20KHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoopIT_SysTick_20KHz &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>Motor_Control_AdvanceCompen</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, motor_control.o(i.Motor_Control_AdvanceCompen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Control_AdvanceCompen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[ec]"></a>Motor_Control_Callback</STRONG> (Thumb, 1068 bytes, Stack size 32 bytes, motor_control.o(i.Motor_Control_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Motor_Control_Callback &rArr; Signal_MoreIO_Config &rArr; Signal_PWM_Config &rArr; REIN_TIM_SIGNAL_PWM_Init &rArr; HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Config
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Capture_Goal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetSleep
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_SetBrake
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_NewTask
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_Capture_Goal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_NewTask
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Capture_Goal
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_NewTask
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Capture_Goal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Interp_NewTask
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Interp_Capture_Goal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_NewTask
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_Capture_Goal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MultiDebug_Speed
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_MultiDebug_Location
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Digital_Track
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Clear_Stall
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Clear_Integral
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_AdvanceCompen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_To_Electric
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_To_Electric
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Cur_To_Electric
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ee]"></a>Motor_Control_Clear_Integral</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor_control.o(i.Motor_Control_Clear_Integral))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[f2]"></a>Motor_Control_Clear_Stall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor_control.o(i.Motor_Control_Clear_Stall))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[fe]"></a>Motor_Control_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, motor_control.o(i.Motor_Control_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_Control_Init &rArr; Location_Tracker_Init &rArr; Location_Tracker_Set_DownAcc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Tracker_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Location_Interp_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Tracker_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_SetStallSwitch
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_SetMotorMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[ff]"></a>Motor_Control_SetMotorMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor_control.o(i.Motor_Control_SetMotorMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdUartRxIsr
</UL>

<P><STRONG><a name="[100]"></a>Motor_Control_SetStallSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motor_control.o(i.Motor_Control_SetStallSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[f0]"></a>Motor_Digital_Track</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, motor_control.o(i.Motor_Digital_Track))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_Digital_Track
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[f8]"></a>Motor_MultiDebug_Location</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motor_control.o(i.Motor_MultiDebug_Location))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[f9]"></a>Motor_MultiDebug_Speed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor_control.o(i.Motor_MultiDebug_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[fb]"></a>Move_Reconstruct_Capture_Goal</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, move_reconstruct.o(i.Move_Reconstruct_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Move_Reconstruct_Capture_Goal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[102]"></a>Move_Reconstruct_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, move_reconstruct.o(i.Move_Reconstruct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Move_Reconstruct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Set_OverTime
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Set_DownAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[f3]"></a>Move_Reconstruct_NewTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, move_reconstruct.o(i.Move_Reconstruct_NewTask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[105]"></a>Move_Reconstruct_Set_DownAcc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, move_reconstruct.o(i.Move_Reconstruct_Set_DownAcc))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Init
</UL>

<P><STRONG><a name="[106]"></a>Move_Reconstruct_Set_OverTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, move_reconstruct.o(i.Move_Reconstruct_Set_OverTime))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Reconstruct_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[154]"></a>Power_Detection_Run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, power_detect.o(i.Power_Detection_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Power_Detection_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[107]"></a>REIN_ADC_Init</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, adc.o(i.REIN_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = REIN_ADC_Init &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[10c]"></a>REIN_DMA_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(i.REIN_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = REIN_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[72]"></a>REIN_GPIO_Button_Init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gpio.o(i.REIN_GPIO_Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = REIN_GPIO_Button_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>

<P><STRONG><a name="[10e]"></a>REIN_GPIO_HwElec_Init</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, gpio.o(i.REIN_GPIO_HwElec_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = REIN_GPIO_HwElec_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_Init
</UL>

<P><STRONG><a name="[10f]"></a>REIN_GPIO_MT6816_SPI_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gpio.o(i.REIN_GPIO_MT6816_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = REIN_GPIO_MT6816_SPI_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_SPI_Signal_Init
</UL>

<P><STRONG><a name="[110]"></a>REIN_GPIO_Modbus_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gpio.o(i.REIN_GPIO_Modbus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = REIN_GPIO_Modbus_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[111]"></a>REIN_GPIO_OLED_Init</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, gpio.o(i.REIN_GPIO_OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = REIN_GPIO_OLED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[112]"></a>REIN_GPIO_SIGNAL_COUNT_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(i.REIN_GPIO_SIGNAL_COUNT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = REIN_GPIO_SIGNAL_COUNT_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_DeConfig
</UL>

<P><STRONG><a name="[115]"></a>REIN_GPIO_SIGNAL_COUNT_Init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, gpio.o(i.REIN_GPIO_SIGNAL_COUNT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = REIN_GPIO_SIGNAL_COUNT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Config
</UL>

<P><STRONG><a name="[116]"></a>REIN_GPIO_SIGNAL_PWM_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(i.REIN_GPIO_SIGNAL_PWM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = REIN_GPIO_SIGNAL_PWM_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_DeConfig
</UL>

<P><STRONG><a name="[117]"></a>REIN_GPIO_SIGNAL_PWM_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, gpio.o(i.REIN_GPIO_SIGNAL_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = REIN_GPIO_SIGNAL_PWM_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Config
</UL>

<P><STRONG><a name="[118]"></a>REIN_HW_Elec_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hw_elec.o(i.REIN_HW_Elec_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = REIN_HW_Elec_Init &rArr; REIN_TIM_HwElec_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_HwElec_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_HwElec_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[ef]"></a>REIN_HW_Elec_SetBrake</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, hw_elec.o(i.REIN_HW_Elec_SetBrake))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = REIN_HW_Elec_SetBrake
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentControl_VREF_12Bit_MixOut
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[7a]"></a>REIN_HW_Elec_SetDivideElec</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, hw_elec.o(i.REIN_HW_Elec_SetDivideElec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = REIN_HW_Elec_SetDivideElec
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentControl_VREF_12Bit_MixOut
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Interrupt_Callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_PID_To_Electric
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_DCE_To_Electric
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_Cur_To_Electric
</UL>

<P><STRONG><a name="[7d]"></a>REIN_HW_Elec_SetSleep</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, hw_elec.o(i.REIN_HW_Elec_SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = REIN_HW_Elec_SetSleep
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentControl_VREF_12Bit_MixOut
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[11b]"></a>REIN_MT6816_Get_AngleData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mt6816.o(i.REIN_MT6816_Get_AngleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = REIN_MT6816_Get_AngleData &rArr; RINE_MT6816_SPI_Get_AngleData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RINE_MT6816_SPI_Get_AngleData
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_Init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11d]"></a>REIN_MT6816_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mt6816.o(i.REIN_MT6816_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = REIN_MT6816_Init &rArr; REIN_MT6816_Get_AngleData &rArr; RINE_MT6816_SPI_Get_AngleData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_SPI_Signal_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_Get_AngleData
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[11e]"></a>REIN_MT6816_SPI_Signal_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mt6816.o(i.REIN_MT6816_SPI_Signal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = REIN_MT6816_SPI_Signal_Init &rArr; REIN_SPI_MT6816_SPI_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_MT6816_SPI_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_MT6816_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_Init
</UL>

<P><STRONG><a name="[11f]"></a>REIN_SPI_MT6816_SPI_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, spi.o(i.REIN_SPI_MT6816_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = REIN_SPI_MT6816_SPI_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_SPI_Signal_Init
</UL>

<P><STRONG><a name="[120]"></a>REIN_SPI_OLED_SPI_Init</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, spi.o(i.REIN_SPI_OLED_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = REIN_SPI_OLED_SPI_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[119]"></a>REIN_TIM_HwElec_Init</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, tim.o(i.REIN_TIM_HwElec_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = REIN_TIM_HwElec_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_Init
</UL>

<P><STRONG><a name="[123]"></a>REIN_TIM_SIGNAL_COUNT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tim.o(i.REIN_TIM_SIGNAL_COUNT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = REIN_TIM_SIGNAL_COUNT_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_DeConfig
</UL>

<P><STRONG><a name="[125]"></a>REIN_TIM_SIGNAL_COUNT_Init</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, tim.o(i.REIN_TIM_SIGNAL_COUNT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = REIN_TIM_SIGNAL_COUNT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Config
</UL>

<P><STRONG><a name="[127]"></a>REIN_TIM_SIGNAL_PWM_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tim.o(i.REIN_TIM_SIGNAL_PWM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = REIN_TIM_SIGNAL_PWM_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_DeConfig
</UL>

<P><STRONG><a name="[129]"></a>REIN_TIM_SIGNAL_PWM_Init</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, tim.o(i.REIN_TIM_SIGNAL_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = REIN_TIM_SIGNAL_PWM_Init &rArr; HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Config
</UL>

<P><STRONG><a name="[12b]"></a>REIN_UART_Modbus_Config</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, usart.o(i.REIN_UART_Modbus_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = REIN_UART_Modbus_Config &rArr; HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
</UL>

<P><STRONG><a name="[12c]"></a>REIN_UART_Modbus_Init</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, usart.o(i.REIN_UART_Modbus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = REIN_UART_Modbus_Init &rArr; REIN_UART_Modbus_Config &rArr; HAL_UART_Init &rArr; UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Set_Mode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Set_BaudRate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[12e]"></a>REIN_UART_Modbus_Set_BaudRate</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.REIN_UART_Modbus_Set_BaudRate))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
</UL>

<P><STRONG><a name="[12d]"></a>REIN_UART_Modbus_Set_Mode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usart.o(i.REIN_UART_Modbus_Set_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
</UL>

<P><STRONG><a name="[4d]"></a>REINui_Calibration_drawing_function</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, xdrive_ui.o(i.REINui_Calibration_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = REINui_Calibration_drawing_function &rArr; SSD1306_Refresh &rArr; SSD1306_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowPicture
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[49]"></a>REINui_ControlDCE_drawing_function</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_ControlDCE_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_ControlDCE_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[4a]"></a>REINui_ControlPID_drawing_function</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_ControlPID_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_ControlPID_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[48]"></a>REINui_Current_drawing_function</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_Current_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_Current_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[43]"></a>REINui_Desktop_drawing_function</STRONG> (Thumb, 1512 bytes, Stack size 56 bytes, xdrive_ui.o(i.REINui_Desktop_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = REINui_Desktop_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowPicture
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[167]"></a>REINui_Directory_Append_Widget</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xdrive_ui.o(i.REINui_Directory_Append_Widget))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
</UL>

<P><STRONG><a name="[166]"></a>REINui_Directory_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xdrive_ui.o(i.REINui_Directory_Init))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
</UL>

<P><STRONG><a name="[42]"></a>REINui_Directory_drawing_function</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, xdrive_ui.o(i.REINui_Directory_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = REINui_Directory_drawing_function &rArr; SSD1306_Refresh &rArr; SSD1306_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowPicture
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_DrawLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[45]"></a>REINui_Encoder_drawing_function</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_Encoder_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_Encoder_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[4e]"></a>REINui_Information_drawing_function</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, xdrive_ui.o(i.REINui_Information_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = REINui_Information_drawing_function &rArr; SSD1306_Refresh &rArr; SSD1306_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[46]"></a>REINui_Location_drawing_function</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_Location_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_Location_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[44]"></a>REINui_Power_drawing_function</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_Power_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_Power_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[4b]"></a>REINui_SignalCount_drawing_function</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_SignalCount_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_SignalCount_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowPicture
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[4c]"></a>REINui_SignalPWM_drawing_function</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_SignalPWM_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_SignalPWM_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_DrawLine
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[47]"></a>REINui_Speed_drawing_function</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, xdrive_ui.o(i.REINui_Speed_drawing_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = REINui_Speed_drawing_function &rArr; GRAM_ShowNum_LI_Max11 &rArr; GRAM_ShowString &rArr; GRAM_ShowChar &rArr; GRAM_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Inquice_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[165]"></a>REINui_Switches_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xdrive_ui.o(i.REINui_Switches_Init))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
</UL>

<P><STRONG><a name="[41]"></a>REINui_Switches_drawing_function</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xdrive_ui.o(i.REINui_Switches_drawing_function))
<BR>[Address Reference Count : 1]<UL><LI> xdrive_ui.o(i.XDrive_REINui_Init)
</UL>
<P><STRONG><a name="[132]"></a>REINui_Widget_Init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, xdrive_ui.o(i.REINui_Widget_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = REINui_Widget_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
</UL>

<P><STRONG><a name="[11c]"></a>RINE_MT6816_SPI_Get_AngleData</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, mt6816.o(i.RINE_MT6816_SPI_Get_AngleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RINE_MT6816_SPI_Get_AngleData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_Get_AngleData
</UL>

<P><STRONG><a name="[135]"></a>SSD1306_Init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, ssd1306.o(i.SSD1306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SSD1306_Init &rArr; SSD1306_Orien_Reversal &rArr; SSD1306_Write_Comm &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_SPI_OLED_SPI_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_OLED_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Write_Comm
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Orien_Reversal
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[137]"></a>SSD1306_Orien_Reversal</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssd1306.o(i.SSD1306_Orien_Reversal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSD1306_Orien_Reversal &rArr; SSD1306_Write_Comm &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Write_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[130]"></a>SSD1306_Refresh</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssd1306.o(i.SSD1306_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SSD1306_Refresh &rArr; SSD1306_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Write_Data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Write_Comm
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Speed_drawing_function
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalPWM_drawing_function
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_SignalCount_drawing_function
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Power_drawing_function
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Location_drawing_function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Information_drawing_function
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Encoder_drawing_function
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_drawing_function
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Desktop_drawing_function
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Current_drawing_function
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlPID_drawing_function
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_ControlDCE_drawing_function
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Calibration_drawing_function
</UL>

<P><STRONG><a name="[136]"></a>SSD1306_Write_Comm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ssd1306.o(i.SSD1306_Write_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSD1306_Write_Comm &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Orien_Reversal
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[138]"></a>SSD1306_Write_Data</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ssd1306.o(i.SSD1306_Write_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSD1306_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>Seek_UART_Mixed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart_mixed.o(i.Seek_UART_Mixed))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[141]"></a>Signal_Count_Capture_Goal</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, signal_port.o(i.Signal_Count_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_Count_Capture_Goal
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Capture_Goal
</UL>

<P><STRONG><a name="[139]"></a>Signal_Count_Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, signal_port.o(i.Signal_Count_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Signal_Count_Config &rArr; REIN_TIM_SIGNAL_COUNT_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_COUNT_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Dir_Res
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Config
</UL>

<P><STRONG><a name="[13a]"></a>Signal_Count_DeConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, signal_port.o(i.Signal_Count_DeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Signal_Count_DeConfig &rArr; REIN_TIM_SIGNAL_COUNT_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_COUNT_DeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_COUNT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Config
</UL>

<P><STRONG><a name="[93]"></a>Signal_Count_Dir_Res</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, signal_port.o(i.Signal_Count_Dir_Res))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_SetDirInve
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Config
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>Signal_Count_Init</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, signal_port.o(i.Signal_Count_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_Count_Init &rArr; Signal_Count_SetDirInve
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_SetFraction
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_SetEnInve
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_SetDirInve
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Init
</UL>

<P><STRONG><a name="[13e]"></a>Signal_Count_SetDirInve</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, signal_port.o(i.Signal_Count_SetDirInve))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Signal_Count_SetDirInve
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Dir_Res
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Init
</UL>

<P><STRONG><a name="[13d]"></a>Signal_Count_SetEnInve</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, signal_port.o(i.Signal_Count_SetEnInve))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Init
</UL>

<P><STRONG><a name="[13c]"></a>Signal_Count_SetFraction</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, signal_port.o(i.Signal_Count_SetFraction))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Init
</UL>

<P><STRONG><a name="[13f]"></a>Signal_Modbus_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, signal_port.o(i.Signal_Modbus_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Signal_Modbus_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Modbus_Set_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[140]"></a>Signal_Modbus_Set_ID</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, signal_port.o(i.Signal_Modbus_Set_ID))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Modbus_Init
</UL>

<P><STRONG><a name="[82]"></a>Signal_MoreIO_Capture_Goal</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, signal_port.o(i.Signal_MoreIO_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_MoreIO_Capture_Goal &rArr; Signal_Count_Capture_Goal
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Capture_Goal
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[f1]"></a>Signal_MoreIO_Config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, signal_port.o(i.Signal_MoreIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Signal_MoreIO_Config &rArr; Signal_PWM_Config &rArr; REIN_TIM_SIGNAL_PWM_Init &rArr; HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_DeConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_DeConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[144]"></a>Signal_MoreIO_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, signal_port.o(i.Signal_MoreIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Signal_MoreIO_Init &rArr; Signal_PWM_Init &rArr; Signal_PWM_Set_TopSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Count_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[143]"></a>Signal_PWM_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Signal_PWM_Config &rArr; REIN_TIM_SIGNAL_PWM_Init &rArr; HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Config
</UL>

<P><STRONG><a name="[142]"></a>Signal_PWM_DeConfig</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_DeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Signal_PWM_DeConfig &rArr; REIN_TIM_SIGNAL_PWM_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_TIM_SIGNAL_PWM_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_SIGNAL_PWM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Config
</UL>

<P><STRONG><a name="[145]"></a>Signal_PWM_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Signal_PWM_Init &rArr; Signal_PWM_Set_TopSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_TopWidth
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_TopSpeed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_TopLocation
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_TopCurrent
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_BottomWidth
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_BottomSpeed
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_BottomLocation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Set_BottomCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Init
</UL>

<P><STRONG><a name="[14d]"></a>Signal_PWM_Set_BottomCurrent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_Set_BottomCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_PWM_Set_BottomCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[149]"></a>Signal_PWM_Set_BottomLocation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, signal_port.o(i.Signal_PWM_Set_BottomLocation))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[14b]"></a>Signal_PWM_Set_BottomSpeed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_Set_BottomSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_PWM_Set_BottomSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[147]"></a>Signal_PWM_Set_BottomWidth</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, signal_port.o(i.Signal_PWM_Set_BottomWidth))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[14c]"></a>Signal_PWM_Set_TopCurrent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_Set_TopCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_PWM_Set_TopCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[148]"></a>Signal_PWM_Set_TopLocation</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, signal_port.o(i.Signal_PWM_Set_TopLocation))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[14a]"></a>Signal_PWM_Set_TopSpeed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, signal_port.o(i.Signal_PWM_Set_TopSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Signal_PWM_Set_TopSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[146]"></a>Signal_PWM_Set_TopWidth</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, signal_port.o(i.Signal_PWM_Set_TopWidth))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_Init
</UL>

<P><STRONG><a name="[14e]"></a>Signal_PWM_TIM_Callback</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, signal_port.o(i.Signal_PWM_TIM_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Signal_PWM_TIM_Callback &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>Speed_Tracker_Capture_Goal</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, speed_tracker.o(i.Speed_Tracker_Capture_Goal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Speed_Tracker_Capture_Goal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[101]"></a>Speed_Tracker_Init</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, speed_tracker.o(i.Speed_Tracker_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Speed_Tracker_Init &rArr; Speed_Tracker_Set_DownAcc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_Set_UpAcc
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_Set_DownAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
</UL>

<P><STRONG><a name="[f5]"></a>Speed_Tracker_NewTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, speed_tracker.o(i.Speed_Tracker_NewTask))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
</UL>

<P><STRONG><a name="[151]"></a>Speed_Tracker_Set_DownAcc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, speed_tracker.o(i.Speed_Tracker_Set_DownAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Speed_Tracker_Set_DownAcc
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_Init
</UL>

<P><STRONG><a name="[150]"></a>Speed_Tracker_Set_UpAcc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, speed_tracker.o(i.Speed_Tracker_Set_UpAcc))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Tracker_Init
</UL>

<P><STRONG><a name="[7f]"></a>Stockpile_Flash_Data_Begin</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stockpile_f103cb.o(i.Stockpile_Flash_Data_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stockpile_Flash_Data_Begin
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
</UL>

<P><STRONG><a name="[7e]"></a>Stockpile_Flash_Data_Empty</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, stockpile_f103cb.o(i.Stockpile_Flash_Data_Empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Stockpile_Flash_Data_Empty &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
</UL>

<P><STRONG><a name="[81]"></a>Stockpile_Flash_Data_End</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stockpile_f103cb.o(i.Stockpile_Flash_Data_End))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
</UL>

<P><STRONG><a name="[80]"></a>Stockpile_Flash_Data_Write_Data16</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stockpile_f103cb.o(i.Stockpile_Flash_Data_Write_Data16))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Stockpile_Flash_Data_Write_Data16 &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, loop_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SysTick_Handler &rArr; Motor_Control_Callback &rArr; Signal_MoreIO_Config &rArr; Signal_PWM_Config &rArr; REIN_TIM_SIGNAL_PWM_Init &rArr; HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_Get_AngleData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Interrupt_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Callback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_second_base_1ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Detection_Run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>SystemClock_Config</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, loop_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM3_IRQHandler &rArr; Signal_PWM_TIM_Callback &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_PWM_TIM_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c4]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>

<P><STRONG><a name="[158]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[c8]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[bf]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[e2]"></a>UART_Dir_Control</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart_mixed.o(i.UART_Dir_Control))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mixed_Begin
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Mixed_TxTrigger
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[15e]"></a>UART_Mixed_TxTrigger</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart_mixed.o(i.UART_Mixed_TxTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Mixed_TxTrigger &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_AbortReceive
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Dir_Control
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdUartRxIsr
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loop_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>Uart_Mixed_Begin</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart_mixed.o(i.Uart_Mixed_Begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Uart_Mixed_Begin &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Dir_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mixed_Init
</UL>

<P><STRONG><a name="[162]"></a>Uart_Mixed_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_mixed.o(i.Uart_Mixed_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Uart_Mixed_Init &rArr; Uart_Mixed_Begin &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mixed_Begin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[163]"></a>XDrive_REINui_Callback_ms</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, xdrive_ui.o(i.XDrive_REINui_Callback_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = XDrive_REINui_Callback_ms &rArr; Button_Scan_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Scan_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_second_run
</UL>

<P><STRONG><a name="[164]"></a>XDrive_REINui_Init</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, xdrive_ui.o(i.XDrive_REINui_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = XDrive_REINui_Init &rArr; SSD1306_Refresh &rArr; SSD1306_Write_Data &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Widget_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Switches_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REINui_Directory_Append_Widget
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Refresh
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowPicture
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[173]"></a>XDrive_REINui_ToCalibration</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xdrive_ui.o(i.XDrive_REINui_ToCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[168]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18b]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRAM_ShowNum_LI_Max11
</UL>

<P><STRONG><a name="[18c]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18d]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[18f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[190]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[176]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[179]"></a>crc16Cal</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, crc16modbus.o(i.crc16Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdUartRxIsr
</UL>

<P><STRONG><a name="[178]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdUartRxIsr
</UL>

<P><STRONG><a name="[104]"></a>i32_abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rein_math.o(i.i32_abs))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Digital_Track
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32_polAdj
</UL>

<P><STRONG><a name="[16f]"></a>i32_polAdj</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, rein_math.o(i.i32_polAdj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = i32_polAdj
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
</UL>

<P><STRONG><a name="[170]"></a>loop</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, loop.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = loop &rArr; REIN_MT6816_Init &rArr; REIN_MT6816_Get_AngleData &rArr; RINE_MT6816_SPI_Get_AngleData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_UART_Modbus_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_GPIO_Modbus_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_DMA_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_ADC_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_MoreIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Modbus_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_HW_Elec_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REIN_MT6816_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Loop_Callback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Mixed_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopIT_SysTick_20KHz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopIT_Priority_Overlay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_second_run
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_ToCalibration
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>loop_second_base_1ms</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, loop.o(i.loop_second_base_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; loop &rArr; REIN_MT6816_Init &rArr; REIN_MT6816_Get_AngleData &rArr; RINE_MT6816_SPI_Get_AngleData &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[175]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
</UL>

<P><STRONG><a name="[174]"></a>time_second_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loop.o(i.time_second_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = time_second_run &rArr; XDrive_REINui_Callback_ms &rArr; Button_Scan_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XDrive_REINui_Callback_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[177]"></a>trackTriger</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, motor_control.o(i.trackTriger))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = trackTriger &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32_polAdj
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32_abs
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdUartRxIsr
</UL>

<P><STRONG><a name="[51]"></a>xdUartRxIsr</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, xdcom.o(i.xdUartRxIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xdUartRxIsr &rArr; trackTriger &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trackTriger
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Control_SetMotorMode
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Mixed_TxTrigger
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16Cal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loop.o(i.loop)
</UL>
<P><STRONG><a name="[50]"></a>xdUartTxIsr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xdcom.o(i.xdUartTxIsr))
<BR>[Address Reference Count : 1]<UL><LI> loop.o(i.loop)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a3]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f1xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[b0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a9]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[95]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a6]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[b9]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[134]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f1xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[c7]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[c9]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ca]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[cf]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_SlaveTimer_SetConfig &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[159]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[15a]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>

<P><STRONG><a name="[c0]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[3b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[3e]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[3c]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[3d]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[3f]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[40]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[d5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[15b]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[d4]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d8]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[169]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[16d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
